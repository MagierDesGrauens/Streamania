<!DOCTYPE html>
<html lang="de-de">
<body>
    <head>
        <title>{% block site_title %}{% endblock %} | Streamania</title>

        {% for styleFile in STYLE_FILES %}
            <link rel="stylesheet" href="{{ WEB_BASE }}css/{{ styleFile }}" />
        {% endfor %}
    </head>
    <main>
        <nav class="navigation navbar navbar-expand-lg">
            <div class="container">
                <a class="navbar-brand" href="{{ WEB_BASE }}">STREAMANIA</a>
                <button
                    class="navbar-toggler"
                    type="button"
                    data-toggle="collapse"
                    data-target="#navbarNavDropdown"
                    aria-controls="navbarNavDropdown"
                    aria-expanded="false"
                    aria-label="Toggle navigation"
                >
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNavDropdown">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="{{ WEB_BASE }}?site=series">
                                Serien
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ WEB_BASE }}?site=movies">
                                Filme
                            </a>
                        </li>
                        {% if LOGGED_IN %}
                            <li class="nav-item">
                                <a class="nav-link" href="{{ WEB_BASE }}?site=user&action=logout">
                                    Logout
                                </a>
                            </li>
                        {% else %}
                            <li class="nav-item">
                                <a class="nav-link" href="{{ WEB_BASE }}?site=user&action=register">
                                    Registrieren
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="{{ WEB_BASE }}?site=user&action=login">
                                    Login
                                </a>
                            </li>
                        {% endif %}
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container container__main">
            <div class="d-none">{% block content_title %}{% endblock %}</div>
            {% set content_title_block = block('content_title') %}
            {% if content_title_block is not empty %}
                <div class="container__title">
                    <h1>
                        {{ content_title_block|raw }}
                    </h1>
                </div>
            {% endif %}

            {% block content %}
                Default Content
            {% endblock %}
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            {% set currYear = 'now' | date('Y') %}
            {% set createYear = '2021' %}
            {% set year = (createYear != currYear) ? '2021 - ' ~ currYear : createYear %}

            &copy; {{ year }} by Tobias Vedder, Jerome Lemoine, Mirco Rohleff - ITM1 - IT119
        </div>
        <div>
            <form id="myform">
                <input id="yt-link" type="text" placeholder="link rein da">
                <input type="submit">
            </form>
            <!--<iframe width="420" height="315"
                    src="https://www.youtube.com/embed/tgbNymZ7vqY">
            </iframe>-->

            <video id='video-container' controls> <!-- autoplay> -->
                Your browser does not support HTML5 video.
            </video>

            <!--<iframe width="560" height="315" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

            </iframe>-->

            <button id="create-room">
                Erstelle raum!
            </button>
        </div>
    </footer>

    {% for scriptFile in SCRIPT_FILES %}
        <script src="{{ WEB_BASE }}js/{{ scriptFile }}"></script>
    {% endfor %}

    <script>
        class VideoPlugin
        {
            constructor() {
                // Verbindung zum Server
                this.socket = null;

                // Video-Container
                this.video = null;
                this.formEl = null;
                this.ytLink = null;

                // Status
                this.state = 'stopped';

                // Video-Src
                this.src = '';

                // Der aktuelle Zeitstempel wie weit das Video ist
                this.timestamp = 0;

                // Zeitstempel in Sekunden, wann das Video angefangen hat,
                // um aktuellen Zeitstempel des Video berechnen zu können
                this.startedAt = 0;
            }

            init(host, port) {
                console.log("Verbinde zum Server...");

                this.video = document.querySelector('#video-container');
                this.formEl = document.querySelector('#myform');
                this.ytLink = document.querySelector('#yt-link');

                this.socket = new SocketPlugin(host, port);
                this.socket.onSocketOpen = this.onSocketOpen.bind(this);
                this.socket.onSocketMessage = this.onSocketMessage.bind(this);
                this.socket.init();

                this.registerEvents();
            }

            registerEvents() {
                //videoElementClick -> onClicked -> Toggle state playing zu stopped oder stopped zu playing + dem Server mitteilen
                // oder gibt es direkt ein event was onPlaying / onStopped aufrufen könnte?
                this.formEl.addEventListener('submit', this.onLinkChanged.bind(this));
            }

            onSocketOpen() {
                this.socket.send('room|connect|1|' + CookiePlugin.get('PHPSESSID'));
            }

            onSocketMessage(event) {
                this.handleMessage(event.data);
            }

            onLinkChanged(e) {
                e.preventDefault();
                //this.ytLink.value;

                this.socket.send('video|src|' + this.ytLink.value);
                document.querySelector('#video-container').src = this.ytLink.value;

                this.state = 'stopped';
                this.timestamp = 0;
                this.startedAt = 0;

                // Test Video:
                // https://cdn.videvo.net/videvo_files/video/free/2014-02/small_watermarked/Microscope_5__Scientist__Videvo_preview.webm
            }

            onPlaying() {
                this.state = 'playing';

                // video|state|playing|TIMESTAMP_OF_VIDEO_SECONDS|TIMESTAMP_OF_VIDEO_STARTED
                socket.send('video|state|playing|5|' + Math.round(Date.now() / 1000));
            }

            onStopped() {
                this.state = 'stopped';

                // video|state|stopped|TIMESTAMP_OF_VIDEO_SECONDS|TIMESTAMP_OF_VIDEO_STARTED
                socket.send('video|state|stopped|3|' + Math.round(Date.now() / 1000));
            }

            handleMessage(message) {
                let commands = message.split('|');
                let command = commands[0];

                console.log(commands);

                if (command === '') {
                    this.handleVideoMessage(commands);
                }
            }

            handleVideoMessage(commands) {
                if (commands[1] === 'src') {
                    this.setVideoSrc(commands[2]);
                } else if (commands[1] === 'state') {
                    let state = commands[2];
                    let videoTimestamp = parseInt(commands[3]);
                    let currentTimestamp = parseInt(commands[4]);

                    this.setState(state);

                    if (state === 'playing') {

                    } else {
                        this.stop();
                    }
                    //this.setVideoTime();
                }
            }

            play() {
                // Video abpsielen
            }

            stop() {
                // Video stoppen
            }

            setSrc(src) {
                this.src = src;

                console.log('Set source to', src);

                // VideoElement.attribute("src", src) ??
            }

            setState(state) {
                this.state = state;

                console.log('Set video state to', state);

                if (state === 'playing') {
                    this.play();
                } else {
                    this.stop();
                }
            }

            setTime(time) {
                // time ist in sekunden --> sollte am besten hinterher als float gemacht werden, aber vorerst zum Test OK
                // VideoElement.setCurrentTime(time) ?? 
            }
        }

        let video = new VideoPlugin();
        video.init("{{ WATCH2GETHER_SOCKET_URL }}", {{ WATCH2GETHER_PORT }});








        /*
        function HandleMessage(msg) {
            video|state|play / stop|TIMESTAMP_OF_VIDEO_SECONDS|TIMESTAMP_OF_VIDEO_STARTED
            let stringMsg = msg.split["|"];
            if (stringMsg[0] === "video") {
                if (stringMsg[1] === "state") {
                    if (stringMsg[2] === "play") {
                        changePlayStop("play");
                    } else {
                        changePlayStop("stop");
                    }
                    setVideoTime(stringMsg[3], stringMsg[4]);
                } else if (stringMsg[1] === "src") {
                    setVideoLink(stringMsg[2]);
                }
            } else if (stringMsg[0] === "users") {
                if (stringMsg[1] === "add") {

                } else if (stringMsg[1] === "remove") {

                } else {

                }
            }
        };
        
        function changelink(userlink) {
            socket.send('video|src|'+userlink);
            setTimeZero();
        }*/
        /*let ytlink = "";
        let template = "https://www.youtube.com/embed/";
        document.getElementById("myform").addEventListener('submit', function (e) {
            e.preventDefault();
            ytlink = document.getElementById('yt-link').value;


            // Test Video:
            // https://cdn.videvo.net/videvo_files/video/free/2014-02/small_watermarked/Microscope_5__Scientist__Videvo_preview.webm
            //document.querySelector('#video-container').src = ytlink;
            //console.log(ytlink);
            //console.log(e);
            //let tmp = ytlink.split("/");

            //socket.send('video|state|TIMESTAMP_OF_VIDEO_SECONDS|TIMESTAMP_OF_VIDEO_STARTED');

            /*let frame = document.querySelector('iframe');
            frame.setAttribute('src', (template + tmp[tmp.length-1]));
            frame.addEventListener('load', function (e) {
                document.getElementsByClassName("ytp-large-play-button")[0].addEventListener('click', function (e) {
                    console.log("start");
                    document.getElementsByClassName("ytp-play-button")[0].addEventListener('click', function (e) {
                        console.log("pause oder play?");
                    });
                });
            });*/
            // schicke link zum server
            // fetch...
            // weiter gehts bei: function HandleMessage(msg) { ...
        //});

        // on button click:
        // HandleMessage("video|state|");
    </script>
</body>
</html>
